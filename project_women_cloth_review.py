# -*- coding: utf-8 -*-
"""PROJECT:- WOMEN CLOTH REVIEW.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y2hqVOryHg8mCFC4Jg3IZGgpsYrsLCvh

# **PROJECT: Women Cloth Reviews Prediction with Multi Nomial Naïve Bayes**

---

# **Objective:**

The primary objective of this project is to build a sentiment analysis model that can predict the sentiment of clothing reviews from an e-commerce dataset. Specifically, the goal is to classify reviews into two sentiment categories:
1.   **Positive**: Reviews with a high rating (e.g., 4 or 5).
2.   **Negative**: Reviews with a lower rating (e.g., 1, 2, or 3).

By using the Multinomial Naïve Bayes algorithm, we aim to:

*   **Understand** the sentiment distribution of reviews based on their textual
content.
*   **Develop** a predictive model that can classify new reviews as positive or negative.
*   **Evaluate** the performance of the model using metrics such as accuracy, precision, recall, and F1-score.

# **Data Source:**

The dataset used for this project is from an e-commerce site specializing in women's clothing. It contains various attributes related to customer reviews of clothing items.
* Data Source URL:[Women Clothing E-Commerce Review Dataset in CSV form](https://raw.githubusercontent.com/YBIFoundation/ProjectHub-MachineLearning/main/Women%20Clothing%20E-Commerce%20Review.csv)

  1.   **Clothing ID**: Unique identifier for each clothing item.
  2.  **Age**: Age of the reviewer.
  3.   **Title**: Title of the review.
  4.   **Review**: Text of the review.
  5.   **Rating**: Rating given to the clothing item (e.g., 1 to 5).
  6.   **Recommended**: Whether the reviewer recommends the item (1 for yes, 0 for no).
  7.   **Positive Feedback**: Number of positive feedbacks received.
  8.   **Division**: Division where the clothing item is categorized.
  9.  **Department**: Department within the division.
  10.  **Category**: Specific category of the clothing item.

The dataset includes 23,486 reviews with text and numerical ratings, providing a comprehensive basis for sentiment analysis. The data will be preprocessed to handle missing values and then used to train and evaluate a Multinomial Naïve Bayes classifier.

# **Implementation Overview**

To achieve the objective, you will:
1. **Import Libraries**: Import the required Python libraries.
2. **Load Datase**t: Load the dataset from a URL.
3. **Preprocess Data**

 *  Handle missing values
 *  Convert ratings to sentiment labels.

4. **Feature Extraction**: Convert reviews to numerical features using TF-IDF.
5. **Split Data**: Divide the data into training and testing sets.
6. **Train Model**: Train the Multinomial Naïve Bayes model.
7. **Evaluate Model**: Assess the model’s performance with accuracy,           classification report, and confusion matrix.



---

# **2. Import Libraries**
"""

import pandas as pd

import numpy as np

import matplotlib.pyplot as plt

import seaborn as sns

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

"""# **3. Load the Dataset**"""

url = 'https://raw.githubusercontent.com/YBIFoundation/ProjectHub-MachineLearning/main/Women%20Clothing%20E-Commerce%20Review.csv'
data = pd.read_csv(url)

data.head()

data.info()

data.shape

"""# **4. Data Exploration and Preprocessing**"""

# Check for missing values
data.isnull().sum()

# Drop rows with missing 'Review' values as they are crucial for text analysis
data = data.dropna(subset=['Review'])

# Convert 'Rating' into binary sentiment labels
data['Sentiment'] = data['Rating'].apply(lambda x: 'positive' if x >= 4 else 'negative')

# Drop rows with missing values in 'Sentiment' column after conversion
data = data.dropna(subset=['Sentiment'])

# Display a sample of the cleaned data
data[['Review', 'Sentiment']].head()

"""# **5. Feature Extraction**"""

# Use TF-IDF Vectorizer
vectorizer = TfidfVectorizer(stop_words='english', max_features=5000)
X = vectorizer.fit_transform(data['Review'])

# Target variable
y = data['Sentiment']

"""# **6. Split the Data**"""

# Split the dataset
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Check the shape of the split data
print(f"Training data shape: {x_train.shape}")
print(f"Testing data shape: {x_test.shape}")

"""# **7. Train the Model**"""

# Initialize and train the Multinomial Naïve Bayes model
model = MultinomialNB()
model.fit(x_train, y_train)

"""# **8. Evaluate the Model**"""

# Predict on the test data
y_pred = model.predict(x_test)

# Accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")

# Classification Report
print("Classification Report:")
print(classification_report(y_test, y_pred))

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['negative', 'positive'], yticklabels=['negative', 'positive'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

"""# **Summary :-**

In this project, we successfully built and evaluated a sentiment analysis model for predicting the sentiment of women’s clothing reviews using the Multinomial Naïve Bayes algorithm. Here’s a summary of the key findings and conclusions:

1.  **Objective Achievement**:

 * The primary objective was to classify clothing reviews into positive and negative sentiments based on customer ratings. We achieved this by preprocessing the data, converting textual reviews into numerical features using TF-IDF Vectorizer, and training a Multinomial Naïve Bayes classifier.

2.  **Data Exploration and Preprocessing:**

 * We started by exploring the dataset, identifying and handling missing
   values, and converting the Rating into sentiment labels. Reviews with  ratings of 4 or 5 were labeled as "positive," while those with ratings of 1, 2, or 3 were labeled as "negative."
 * The dataset was cleaned to ensure that the text reviews and sentiment
   labels were complete and consistent.
3. **Feature Extraction:**

 * We employed the TF-IDF Vectorizer to convert text reviews into numerical features. This approach helps capture the importance of words in reviews while reducing the impact of common words.
4. **Model Training and Evaluation:**

 * The Multinomial Naïve Bayes classifier was trained on the training set  
   and evaluated on the test set. The model demonstrated strong performance in classifying reviews accurately, as evidenced by high accuracy, precision, recall, and F1-score metrics.
 * The confusion matrix provided insights into the model’s performance,
   revealing how well it distinguished between positive and negative sentiments.
5. **Insights and Applications:**

 * The model’s ability to classify reviews into sentiment categories can be
   leveraged for various applications, such as improving customer satisfaction by identifying common issues or enhancing product recommendations based on review sentiments.
 * Businesses can use such models to gain valuable feedback on their  
   products and tailor their marketing strategies accordingly.
6. **Future Work:**

 * Future improvements could involve experimenting with more advanced models
   like Logistic Regression or Transformer-based models (e.g., BERT) to potentially enhance performance.
 * Incorporating additional features such as Title, Age, and Category could
   provide a more comprehensive understanding of review sentiments.

In summary, this project demonstrates the effectiveness of the Multinomial Naïve Bayes algorithm in sentiment analysis for e-commerce reviews. The insights gained from the sentiment classification can guide businesses in enhancing their products and customer service strategies.
"""